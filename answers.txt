/******************************************************************************
** DIT181 Datastrukturer och algoritmer, LP3 2021
** Lab 1: Sorting, Complexity
*******************************************************************************/

Group members:
- [Drake Axelrod]
- [Vernita Gouws]
- [Axel Lindmark]

/******************************************************************************
** Task: Figuring out the complexity
**
** 1. What is the complexity of running each of the following algorithms
**    on each of the following kinds of inputs?
**    You only have to decide between quadratic or faster than quadratic.
******************************************************************************/

Insertion.java on:

- random inputs:      Quadratic
- 95% sorted inputs:  Quadratic
- sorted inputs:      Faster than quadratic

Quick.java on:

- random inputs:      Faster than quadratic
- 95% sorted inputs:  Faster than quadratic
- sorted inputs:      Quadratic

Merge.java on:

- random inputs:      Faster than quadratic
- 95% sorted inputs:  Faster than quadratic
- sorted inputs:      Faster than quadratic

/******************************************************************************
** 2. How did you check if an algorithm had quadratic complexity or not?
******************************************************************************/

[We used deductive reasoning and mathematics. When a sorting algorithm increased quadratically as the number of inputs grew,
we reasoned that it would be following a quadratic style of growth. For example, when there are 10,000 elements and the runtime is 1second,
then when the elements increase to 30,000 elements, we expect the runtime to be around 9seconds.
Quicksort - The complexity is N^2 for the sorted array because it is using the first element as the pivot, which is the lowest number in a sorted array.
The complexity for the Random and 95% sorted arrays are faster than quadratic as these arrays use more efficient pivots.
Insertion sort - The complexity is N^2 for Random and 95% Sorted arrays, because the algorithm iterates over the entire array multiple times in order to sort the array.
However, the best case scenario is that the array is already sorted, in which case there will only be one iteration of the entire array where the algorithm would
accept the order and complete its run - Making the complexity for the sorted array O(N).
Merge Sort - For all arrays in Merge Sort the runtime is faster than quadratic O(NlogN). This is because the algorithm selects a median index in the array,
which leads to an increased equality in the split sections. Naturally the increased equality improves the efficiency of the algorithm, which is
what Quicksort tries to emulate with the 'median-of-three' concept.
]

/******************************************************************************
** Task: Improving quicksort
**
** 3. Do the following changes affect the complexity of quicksort
**    on any kind of input data? If so, what is it that changes?
******************************************************************************/

Shuffling the array first:
[yes]
According to our test runs, shuffling the arrays before sorting them increased the runtime slightly on the Random array - but it remains faster than quadratic
Approximately tripled the time on 95% sorted, but still faster than quadratic
Dramatically increased the time on the the Sorted array, which was already quadratic, and thus remains so.

Median-of-three pivot selection:
[yes]
On the Random array, the runtime increases with a slight amount, keeping to faster than quadratic runtime.
On 95% sorted array, the runtime improves a lot, keeping a faster than quadratic runtime.
On Sorted arrays, the runtime increases dramatically, making its runtime faster than quadratic.


Insertion sort for small arrays:
[no]

/******************************************************************************
** 4. What is a good cutoff to use for insertion sort?
**    Explain briefly how you came to this answer.
**    Remember that you should try to find the answer in a systematic way.
******************************************************************************/

A good cutoff would be around 50 elements as insertion sort more efficient on smaller arrays we came
to this answer by systematically testing values and incrementing or decrementing until we arrived at 50.
When you start using a cutoff point higher than 100 then smaller array sorting get slower.

/******************************************************************************
** 5. Which combination of improvements gives the best performance?
******************************************************************************/

Shuffle first: off
Median of three: on
Cutoff: 50
ExecutionTimeReport("Quick.java: quicksort with all improvements", new Quick(false, true, 50)::sort);

/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

[Drake]:  [3]
[Vernita]:  [3]
[Axel]:  [3]


/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

We had bugs when we attempted add to functions because we sent values instead of indexes.
There were no bugs in submission that we could find.

/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/

We were in a zoom call the entire time working together, so we think that it was an
100% collaborative effort.
We used https://code4coding.com/java-program-to-find-middle-of-three-numbers/
to help expedite the process of the if statements for the median sort.

/******************************************************************************
** D. Describe any serious problems you encountered.                    
******************************************************************************/

We did not have any serious problems

/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned 
**    from doing the assignment, and whether you enjoyed it.                                             
******************************************************************************/

no other comments
