/******************************************************************************
** DIT181 Datastrukturer och algoritmer, LP3 2021
** Lab 1: Sorting, Complexity
*******************************************************************************/

Group members:
- [Drake Axelrod]
- [Vernita Gouws]
- [Axel Lindmark]

/******************************************************************************
** Task: Figuring out the complexity
**
** 1. What is the complexity of running each of the following algorithms
**    on each of the following kinds of inputs?
**    You only have to decide between quadratic or faster than quadratic.
******************************************************************************/

Insertion.java on:

- random inputs:      Quadratic
- 95% sorted inputs:  Quadratic
- sorted inputs:      Faster than quadratic

Quick.java on:

- random inputs:      Faster than quadratic
- 95% sorted inputs:  Faster than quadratic
- sorted inputs:      Quadratic

Merge.java on:

- random inputs:      Faster than quadratic
- 95% sorted inputs:  Faster than quadratic
- sorted inputs:      Faster than quadratic

/******************************************************************************
** 2. How did you check if an algorithm had quadratic complexity or not?
******************************************************************************/

[Google, in addition to deductive reasoning if a sorting algorithm seemed to increase exponentially then it would be
following a quadratic style of growth]

/******************************************************************************
** Task: Improving quicksort
**
** 3. Do the following changes affect the complexity of quicksort
**    on any kind of input data? If so, what is it that changes?
******************************************************************************/

Shuffling the array first:
[no]


Median-of-three pivot selection:
[yes]
by using a universal pivot point that is located at the middle of the arrays it allows for more
efficient splitting which means that overall the entire array can be sorted faster. Essentially
by creating more equal partitions the functions can more economically sort the arrays.

Insertion sort for small arrays:
[yes]
Because insertion sort has a smaller complexity rate then quicksort when sorting arrays of a smaller size hence when we use the
cutoff point of 50 the quicksort method switches to insertion which in turn increases the speed of the sorting.

/******************************************************************************
** 4. What is a good cutoff to use for insertion sort?
**    Explain briefly how you came to this answer.
**    Remember that you should try to find the answer in a systematic way.
******************************************************************************/

a good cutoff should be around 50 elements as insertion sort more efficient on smaller arrays
we came to this answer by systematically testing values and incrementing or decrementing until we arrived at 50.
when you start using cutoff higher then 100 then smaller array sorting get slower.

/******************************************************************************
** 5. Which combination of improvements gives the best performance?
******************************************************************************/

shuffle first: off
median of three: on
cutoff: 50
executionTimeReport("Quick.java: quicksort with all improvements", new Quick(false, true, 50)::sort);

/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

[Drake]:  [2]
[Vernita]:  [2]
[Axel]:  [2]


/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

We had bugs when we attempted add to functions because we sent values instead of indexes.
no bugs in submission that we could find.

/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/

we were in a zoom call the entire time working together, so we think that it was an
100% collaborative effort.
we used https://code4coding.com/java-program-to-find-middle-of-three-numbers/
to help expedite the process of the if statements for the median sort.

/******************************************************************************
** D. Describe any serious problems you encountered.                    
******************************************************************************/

we did not have any serious problems

/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned 
**    from doing the assignment, and whether you enjoyed it.                                             
******************************************************************************/

no other comments
